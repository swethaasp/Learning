Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

//Bruteforce with O(n2)
class Solution {
    public int singleNumber(int[] nums) {
        int n=nums.length;
      
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<n;j++){
                if(nums[i]==nums[j]){
                   count++;
                }     
            }
            if(count==1){
                return nums[i];
            }
        }
       return -1;
    }
}

//hashArray
class Solution {
    public int singleNumber(int[] nums) {
         int n = nums.length;

        // Find the maximum element:
        int maxi = nums[0];
        for (int i = 0; i < n; i++) {
            maxi = Math.max(maxi, nums[i]);
        }

        // Declare hash array of size maxi+1
        // And hash the given array:
        int[] hash = new int[maxi + 1];
        for (int i = 0; i < n; i++) {
            hash[nums[i]]++;
        }

        //Find the single element and return the answer:
        for (int i = 0; i < n; i++) {
            if (hash[nums[i]] == 1)
                return nums[i];
        }

        //This line will never execute
        //if the array contains a single element.
        return -1;
    }
}  //but gives runtime error (because 10^9 can be the element.so hash array wont work for it)


//using hashmap
class Solution {
    public int singleNumber(int[] nums) {
         int n = nums.length;

        HashMap<Integer,Integer> map =new HashMap<>();
        for(int i=0;i<n;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        
       for( Map.Entry<Integer,Integer> entry :  map.entrySet()){
           if(entry.getValue()==1){
               return entry.getKey();
           }
       }
        return -1;
    }
}
