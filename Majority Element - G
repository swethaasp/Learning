Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears strictly more than N/2 times in the array.
 

Example 1:

Input:
N = 3 
A[] = {1,2,3} 
Output:
-1
Explanation:
Since, each element in 
{1,2,3} appears only once so there 
is no majority element.
Example 2:

Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3
Explanation:
Since, 3 is present more
than N/2 times, so it is 
the majority element.

Your Task:
The task is to complete the function majorityElement() which returns the majority element in the array. If no majority exists, return -1.
 

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).
 

Constraints:
1 ≤ N ≤ 107
0 ≤ Ai ≤ 106


class Solution
{
    static int majorityElement(int a[], int size)
    {
        // your code here
        int target=size/2;
        HashMap<Integer,Integer> map=new HashMap<>();
        
        for(int num : a){
           map.put(num,map.getOrDefault(num,0)+1); 
        }
        
        for(Map.Entry<Integer,Integer> entry : map.entrySet()){
            if(entry.getValue()>target){
                return entry.getKey();
            }
        }
        return -1;
    }
}




//sorting-based approach:

import java.util.Arrays;

class Solution {
    static int majorityElement(int a[], int size) {
        // Sort the array
        Arrays.sort(a);

        // Find the middle element
        int candidate = a[size / 2];

        // Verify if it is indeed the majority element
        int count = 0;
        for (int num : a) {
            if (num == candidate) {
                count++;
            }
        }

        if (count > size / 2) {
            return candidate;
        }
        return -1;
    }
}
