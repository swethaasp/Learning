Given a number x and an array of integers arr, find the smallest subarray with sum greater than the given value. If such a subarray do not exist return 0 in that case.

Examples:

Input: x = 51, arr[] = [1, 4, 45, 6, 0, 19]
Output: 3
Explanation: Minimum length subarray is [4, 45, 6]
Input: x = 100, arr[] = [1, 10, 5, 2, 7]
Output: 0
Explanation: No subarray exist
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ arr.size, x ≤ 105
0 ≤ arr[] ≤ 104


//Sliding window or 2 pointer approach
class Solution {

    public static int smallestSubWithSum(int x, int[] arr) {
        // Your code goes here
        int minlength=Integer.MAX_VALUE;
        int start=0;
        int currsum=0;
        for(int end=0;end<arr.length;end++){
            currsum+=arr[end];
            
            while(currsum>x ){
               minlength=Math.min(minlength,end-start+1);
               currsum-=arr[start];
               start++;
            }
        
        }
      
        return minlength==Integer.MAX_VALUE? 0 : minlength;
    }
}
