Problem statement
Given an array ‘a’ of size ‘n’-1 with elements of range 1 to ‘n’. The array does not contain any duplicates. Your task is to find the missing number.



For example:
Input:
'a' = [1, 2, 4, 5], 'n' = 5

Output :
3

Explanation: 3 is the missing value in the range 1 to 5.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
4 
1 2 3
Sample Output 1:
4
Explanation Of Sample Input 1:
4 is the missing value in the range 1 to 4.
Sample Input 2:
8
1 2 3 5 6 7 8
Sample Output 2:
4
Explanation Of Sample Input 2:
4 is the missing value in the range 1 to 8.
Expected time complexity:
The expected time complexity is O(n).
Constraints:
1 <= 'n' <= 10^6 
1 <= 'a'[i] <= 'n'
Time Limit: 1 sec

//Summation Approach O(N)
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
        int Esum= N*(N+1)/2;


        int sum=0;
        for(int num:a){
            sum+=num;   //actual sum
        }
        return Esum-sum;
    }
}



/bruteforce with O(n2)
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.

        for(int i=1;i<=N;i++){
            int flag=0;
           for(int j=0;j<N-1;j++){
               if(a[j]==i){
                 flag=1;
                 break;
               }
           }
           if(flag==0){
               return i;
           }
        }
       return -1;
    }
}

//using hash array  with  O(2N)
import java.util.Arrays;
 class Solution {
    public static int missingNumber(int []a, int N) {

        int[]  hash=new int[N+1];
        Arrays.fill(hash,0);

        for(int i=0;i<N-1;i++){
            hash[a[i]]++;
        }
         
         for(int i=1;i<=N;i++){
             if(hash[i]==0){
                 return i;
             }
         }
      return -1;
    }
}

//xor approach(Leetcode)  with O(2N)

class Solution {
    public int missingNumber(int[] nums) {
        
        int xor1=0;
        int xor2=0;
        for(int i=1;i<=nums.length;i++){
            xor1=xor1^i;       //1^2^3^4^5
        }
        
        for(int i=0;i<nums.length;i++){
            xor2=xor2^nums[i];   //1^2^4^5  ( 1 and 1 get cancel, 2 and 2 get cancel goes on ....and left out with 3)
        }
        
        return xor1^xor2;    //3
    }
}

//xor approach with O(N)
class Solution {
    public int missingNumber(int[] nums) {
        
        int xor1=0;
        int xor2=0;

        for(int i=0;i<nums.length;i++){
            xor1=xor1^nums[i];  //3 0 1
            xor2=xor2^(i+1);   //1 2 3 
        }

        return xor1^xor2;  //2 will remainining after all gets cancelled
    }
}

