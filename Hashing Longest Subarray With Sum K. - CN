Problem statement
Ninja and his friend are playing a game of subarrays. They have an array ‘NUMS’ of length ‘N’. Ninja’s friend gives him an arbitrary integer ‘K’ and asks him to find the length of the longest subarray in which the sum of elements is equal to ‘K’.

Ninjas asks for your help to win this game. Find the length of the longest subarray in which the sum of elements is equal to ‘K’.

If there is no subarray whose sum is ‘K’ then you should return 0.

Example:
Input: ‘N’ = 5,  ‘K’ = 4, ‘NUMS’ = [ 1, 2, 1, 0, 1 ]

Output: 4

There are two subarrays with sum = 4, [1, 2, 1] and [2, 1, 0, 1]. Hence the length of the longest subarray with sum = 4 is 4.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= T <= 10
1 <= N <= 10^5
-10^6 <= NUMS[ i ] <= 10^6
-10^6 <= K <= 10^6

Sum of N Over all the Test cases <= 10^5

Time Limit: 1 sec
Sample Input 1 :
2
3 5
2 3 5
3 1
-1 1 1
Sample Output 1 :
2
3
Explanation Of Sample Input 1 :
For the first case:
There are two subarrays with sum = 5, [2, 3] and [5]. Hence the length of the longest subarray is 2.

For the second case:
Longest subarray with sum = 1 is [1, -1, 1].
Sample Input 2 :
2
3 4
1 1 1
3 2
-50 0 52
Sample Output 2 :
0 
3




//Bruteforce Approach  with O(n3)
import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		// Write your code here.
	int len =0;
	int n=nums.length;

	for(int i=0;i<n;i++){
		for(int j=i;j<n;j++){
		  int sum=0;
		  for(int z=i;z<=j;z++){
			  sum=sum+nums[z];
		  }

		  if(sum==k){
			  len = Math.max(j-i+1,len);
		  }	
		}
	
	}
	return len;
	}
}

//Bruteforce Approach  with O(n2)

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		// Write your code here.
	int len =0;
	int n=nums.length;

	for(int i=0;i<n;i++){
		int sum=0;
		for(int j=i;j<n;j++){
			  sum=sum+nums[j];
		      if(sum==k){
			     len = Math.max(j-i+1,len);
		        }	
		   }
	}
	return len;
	}
}


//hashing 
import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		// Write your code here.

        Map<Integer,Integer> map =new HashMap<>();
        int maxLen=Integer.MIN_VALUE;
        int n=nums.length;
        int sum=0;

        for(int i=0;i<n;i++){
          sum=sum+nums[i];
          if(sum==k){
            maxLen=Math.max(maxLen,i+1);
          }

         if(!map.containsKey(sum)){
            map.put(sum,i);
           }

        int rem=sum-k;
        if(map.containsKey(rem)){
            int len = i-map.get(rem);
            maxLen=Math.max(len,maxLen);
        }

        }

        if(maxLen==Integer.MIN_VALUE){
            return 0;
        }
        return maxLen;
	}
}


//GFG
Given an array arr containing n integers and an integer k. Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value k.

 

Examples:
 

Input :
arr[] = {10, 5, 2, 7, 1, 9}, k = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.
Input : 
arr[] = {-1, 2, 3}, k = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).


class Solution{
    
   
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int A[], int N, int K) {
        //Complete the function
        
        HashMap<Integer,Integer> map =new HashMap<>();
        int sum=0;
        int maxlen=0;
       
    
        
        for(int i=0;i<N;i++){
            sum=sum+A[i];
            
            if(sum==K){
                maxlen = Math.max(i+1,maxlen);
            }
            
            if(!map.containsKey(sum)){
                map.put(sum,i);
            }
            
            int rem =sum-K;
            if(map.containsKey(rem)){
                int len=i-map.get(rem);
                maxlen=Math.max(len,maxlen);
            }
            
    }
    
  return maxlen;  
    
}
}
