Given an array of strings arr. Return the longest common prefix among all strings present in the array. If there's no prefix common in all the strings, return "-1".

Examples :

Input: arr[] = ["geeksforgeeks", "geeks", "geek", "geezer"]
Output: gee
Explanation: "gee" is the longest common prefix in all the given strings.
Input: arr[] = ["hello", "world"]
Output: -1
Explanation: There's no common prefix in the given strings.
Expected Time Complexity: O(n*min(|arri|))
Expected Space Complexity: O(min(|arri|))

Constraints:
1 ≤ |arr| ≤ 103
1 ≤ |arr[i]| ≤ 103

class Solution {
    public String longestCommonPrefix(String arr[]) {
        // code here
        if(arr[0].length()==0){
            return "-1";
        }
        String prefix=arr[0];
        for(int i=1;i<arr.length;i++){
            if(arr[i].length()<prefix.length()){
                prefix=arr[i];
            }
        }
        int prefixLength= prefix.length();
        
        
        for(int i=0;i<arr.length;i++){
            while(arr[i].indexOf(prefix.substring(0,prefixLength))!=0){
                prefixLength--;
                if(prefixLength==0){
                    return "-1";
                }
            }
        }
        return prefix.substring(0,prefixLength);
    }
}



class Solution {
    public String longestCommonPrefix(String[] arr) {
        if (arr == null || arr.length == 0) {
            return "-1";
        }

        // Determine the smallest string
        String smallest = arr[0];
        for (String str : arr) {
            if (str.length() < smallest.length()) {
                smallest = str;
            }
        }

        int prefixLength = smallest.length();

        // Use a while loop to check prefixes
        while (prefixLength > 0) {
            String prefix = smallest.substring(0, prefixLength);
            boolean isCommon = true;

            // Check if the prefix is common to all strings
            for (String str : arr) {
                if (!str.startsWith(prefix)) {
                    isCommon = false;
                    break;
                }
            }

            // If the prefix is common, return it
            if (isCommon) {
                return prefix;
            }

            // Otherwise, decrease the prefix length
            prefixLength--;
        }

        // If no common prefix is found, return "-1"
        return "-1";
    }
}
