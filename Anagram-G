Given two strings a and b consisting of lowercase characters. The task is to check whether two given strings are an anagram of each other or not. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, act and tac are an anagram of each other. Strings a and b can only contain lower case alphabets.

Note:-

If the strings are anagrams you have to return True or else return False

|s| represents the length of string s.


Example 1:

Input:a = geeksforgeeks, b = forgeeksgeeks
Output: YES
Explanation: Both the string have same characters with
        same frequency. So, both are anagrams.
Example 2:

Input:a = allergy, b = allergic
Output: NO
Explanation: Characters in both the strings are 
        not same, so they are not anagrams.
Your Task:
You don't need to read input or print anything. Your task is to complete the function isAnagram() which takes the string a and string b as input parameter and check if the two strings are an anagram of each other. The function returns true if the strings are anagram else it returns false.

Expected Time Complexity:O(|a|+|b|).
Expected Auxiliary Space: O(Number of distinct characters).

Constraints:
1 ≤ |a|,|b| ≤ 105


class Solution {
    public static boolean isAnagram(String a, String b) {
        if(a.length()!=b.length()){
            return false;
        }
        
        if(a.length()==b.length()){
        char[] ch1=a.toCharArray();
        char[] ch2=b.toCharArray();
        Arrays.sort(ch1);
        Arrays.sort(ch2);
        for(int i=0;i<ch1.length;i++){
            if(ch1[i]!=ch2[i]){
                return false;
            }
        }
        }
       return true;   
    }
}



//using hashmap

import java.util.HashMap;

class Solution {
    public static boolean isAnagram(String a, String b) {
        // Check if lengths are the same
        if (a.length() != b.length()) {
            return false;
        }
        
        // Create frequency counters
        HashMap<Character, Integer> freqMapA = new HashMap<>();
        HashMap<Character, Integer> freqMapB = new HashMap<>();
        
        // Count frequencies for string a
        for (char ch : a.toCharArray()) {
            freqMapA.put(ch, freqMapA.getOrDefault(ch, 0) + 1);
        }
        
        // Count frequencies for string b
        for (char ch : b.toCharArray()) {
            freqMapB.put(ch, freqMapB.getOrDefault(ch, 0) + 1);
        }
        
        // Compare frequency maps
        return freqMapA.equals(freqMapB);
    }
}

//using Arrays.equals
import java.util.Arrays;

class Solution {
    public static boolean isAnagram(String a, String b) {
        // Check if lengths are the same
        if (a.length() != b.length()) {
            return false;
        }
        
        // Convert strings to char arrays
        char[] arrA = a.toCharArray();
        char[] arrB = b.toCharArray();
        
        // Sort both arrays
        Arrays.sort(arrA);
        Arrays.sort(arrB);
        
        // Compare sorted arrays
        return Arrays.equals(arrA, arrB);
    }
}


//using Arrays
class Solution {
    public static boolean isAnagram(String a, String b) {
        // Check if lengths are the same
        if (a.length() != b.length()) {
            return false;
        }
        
        // Create frequency arrays
        int[] countA = new int[26];
        int[] countB = new int[26];
        
        // Count frequencies for string a
        for (char ch : a.toCharArray()) {
            countA[ch - 'a']++;
        }
        
        // Count frequencies for string b
        for (char ch : b.toCharArray()) {
            countB[ch - 'a']++;
        }
        
        // Compare frequency arrays
        for (int i = 0; i < 26; i++) {
            if (countA[i] != countB[i]) {
                return false;
            }
        }
        
        return true;
    }
}


//hashmap
import java.util.HashMap;

class Solution {
    public static boolean isAnagram(String a, String b) {
        // Check if lengths are the same
        if (a.length() != b.length()) {
            return false;
        }
        
        // Create frequency counter
        HashMap<Character, Integer> countMap = new HashMap<>();
        
        // Count characters in the first string
        for (char ch : a.toCharArray()) {
            countMap.put(ch, countMap.getOrDefault(ch, 0) + 1);
        }
        
        // Decrease count for characters in the second string
        for (char ch : b.toCharArray()) {
            if (!countMap.containsKey(ch)) {
                return false;
            }
            countMap.put(ch, countMap.get(ch) - 1);
            if (countMap.get(ch) == 0) {
                countMap.remove(ch);
            }
        }
        
        // Check if all counts are zero
        return countMap.isEmpty();
    }
}


//leetcode
class Solution {
    public boolean isAnagram(String s, String t) {
        
        if(s.length()!=t.length()){
            return false;
        }
        
        char a1[] =new char[s.length()];
        char a2[] =new char[t.length()];
        
        for(int i=0;i<s.length();i++){
         a1[i]= s.charAt(i);  
        }
        
         for(int i=0;i<t.length();i++){
         a2[i]= t.charAt(i);  
        }
       
        
        Arrays.sort(a1);
        Arrays.sort(a2);
        
        for(int i=0;i<a1.length;i++){
            if(a1[i]!=a2[i]){
                return false;
            }
        }
        return true;
    }
}
