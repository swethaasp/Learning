Given an unsorted array arr of size n of positive integers. One number 'A' from set {1, 2,....,N} is missing and one number 'B' occurs twice in array. Find these two numbers.
Your task is to complete the function findTwoElement() which takes the array of integers arr and n as parameters and returns an array of integers of size 2 denoting the answer (The first index contains B and second index contains A)

Examples

Input: n = 2 arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and smallest positive missing number is 1.
Input: n = 3 arr[] = {1, 3, 3} 
Output: 3 2
Explanation: Repeating number is 3 and smallest positive missing number is 2.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
2 ≤ n ≤ 105
1 ≤ arr[i] ≤ n


//brute force array
class Solve {
    int[] findTwoElement(int arr[], int n) {
        // code here
        int[] res=new int[2];
        int repeating =-1;
        int missing =-1;
        for(int i=1;i<=n;i++){
            int count=0;
             for(int j=0;j<n;j++){
                 if(arr[j]==i){
                     count++;
                 }
             }
             if(count>1){
                repeating =i; 
             }
             
             else if(count==0){
                 missing=i;
             }
             
             if(repeating !=-1 && missing !=-1){
                 break;
             }
        }
         res[0]=repeating;
         res[1]=missing;
         
         return res;
       
    }
}



//using hash Array 
class Solve {
    int[] findTwoElement(int arr[], int n) {
        int repeating =-1;
        int missing =-1;
        int[]  hash =new int[n+1];  //creating hash array
        
        for(int i=0;i<n;i++){
            hash[arr[i]]++;
        }
        
        for(int i=1;i<=n;i++){
            if(hash[i]==2){
                repeating=i;
            }
            else if(hash[i]==0){
                missing=i;
            }
            
            else if(missing!=-1 && repeating!=-1){
                break;
            }
        }
        
       int[] ans = {repeating, missing};
       return ans;
        }
}



 Mathematical approach
      
      long SN  = n *(n+1)/2;   //sum of n natu no.
      long SN2 =  (n*(n+1) *(2*n+1))/6;   //sum of sq of n nat nos
      
      long sum=0;
      long sumsq=0;
      
      for(int i=0;i<n;i++){
          sum=sum + (long)arr[i];      //actual sum
          sumsq= sumsq + (long)arr[i]* (long)arr[i];  //actual sum of sq
      }
      
      long val1 = sum-SN;
      long val2 = sumsq - SN2;
      val2=val2/val1;
      
      long x = val1+val2/2;   //repeating
      long y =x-val1;  //missing
      
      int[]  res = {(int)x,(int)y};
      return res;

