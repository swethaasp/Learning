Given a string S of lowercase alphabets, check if it is isogram or not. An Isogram is a string in which no letter occurs more than once.

Example 1:

Input:
S = machine
Output: 1
Explanation: machine is an isogram
as no letter has appeared twice. Hence
we print 1.
Example 2:

Input:
S = geeks
Output: 0
Explanation: geeks is not an isogram
as 'e' appears twice. Hence we print 0.
Your Task:
This is a function problem. You only need to complete the function isIsogram() that takes a string as a parameter and returns either true or false.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(Number of distinct characters).
Note: N = |S|

Constraints:
1 <= |s| <= 103


class Solution
{
    //Function to check if a string is Isogram or not.
    static boolean isIsogram(String data){
        //Your code here
        for(int i=0;i<data.length();i++){
            for(int j=i+1;j<data.length();j++){
                if(data.charAt(i)==data.charAt(j)){
                    return false;
                }
            }
        }
        return true;
    }
}



import java.util.HashSet;

class Solution {
    public static boolean isIsogram(String S) {
        // Create a Set to track characters
        HashSet<Character> seen = new HashSet<>();
        
        // Traverse each character in the string
        for (char ch : S.toCharArray()) {
            // If the character is already in the Set, it's not an isogram
            if (seen.contains(ch)) {
                return false;
            }
            // Add the character to the Set
            seen.add(ch);
        }
        
        // If no duplicates found, it's an isogram
        return true;
    }
}
